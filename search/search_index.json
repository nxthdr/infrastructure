{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"nxthdr Infrastructure Documentation","text":"<p>Welcome to the nxthdr infrastructure documentation. This repository manages the infrastructure for nxthdr using Infrastructure as Code principles.</p>"},{"location":"#what-is-this","title":"What is this?","text":"<p>This repository contains all the configuration, automation, and documentation needed to deploy and manage the nxthdr platform infrastructure, including:</p> <ul> <li>Core services - Grafana, Prometheus, ClickHouse, PostgreSQL, Redpanda, and more</li> <li>IXP servers - BGP routing and peering infrastructure</li> <li>Probing servers - Active measurement infrastructure</li> <li>Network configuration - BIRD (BGP) and WireGuard (VPN) configurations</li> </ul>"},{"location":"#technology-stack","title":"Technology Stack","text":"<ul> <li>Ansible - Configuration management and file synchronization</li> <li>Terraform - Docker container orchestration</li> <li>Jinja2 - Template rendering</li> <li>Ansible Vault - Secrets management</li> <li>Docker - Container runtime</li> <li>BIRD - BGP routing daemon</li> <li>WireGuard - VPN tunneling</li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Getting Started - Learn about the infrastructure architecture</li> <li>Setup - Set up your local environment</li> <li>Quick Start - Deploy your first change</li> <li>Common Tasks - Frequently performed operations</li> <li>Troubleshooting - Common issues and solutions</li> </ul>"},{"location":"#server-inventory","title":"Server Inventory","text":""},{"location":"#core-servers","title":"Core Servers","text":"<ul> <li>coreams01 - Scaleway Dedibox, Amsterdam</li> <li>All core services (databases, observability, messaging)</li> </ul>"},{"location":"#ixp-servers","title":"IXP Servers","text":"<ul> <li>ixpams01 - iFog, Amsterdam (NL-IX)</li> <li>ixpams02 - iFog, Amsterdam</li> <li>ixpfra01 - iFog, Frankfurt (LocIX, FogIXP)</li> </ul>"},{"location":"#probing-servers","title":"Probing Servers","text":"<ul> <li>vltatl01 - Vultr, Atlanta</li> <li>vltcdg01 - Vultr, Paris</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>This infrastructure is managed as code and is open source. If you find issues or have suggestions:</p> <ol> <li>Open an issue on GitHub</li> <li>Submit a pull request with improvements</li> <li>Contact us at admin@nxthdr.dev</li> </ol>"},{"location":"#security","title":"Security","text":"<p>If you discover a security vulnerability:</p> <ul> <li>For security issues, prefer email: admin@nxthdr.dev</li> <li>Or open an issue on GitHub</li> </ul>"},{"location":"getting-started/overview/","title":"Infrastructure Overview","text":"<p>The nxthdr infrastructure is designed to support Internet research and education through a globally distributed network of servers running specialized services.</p>"},{"location":"getting-started/overview/#architecture","title":"Architecture","text":"<p>The infrastructure consists of three main components:</p>"},{"location":"getting-started/overview/#1-core-services-coreams01","title":"1. Core Services (coreams01)","text":"<p>A bare-metal Scaleway Dedibox server in Amsterdam running all essential services:</p> <ul> <li>Databases: ClickHouse, PostgreSQL</li> <li>Messaging: Redpanda (Kafka-compatible)</li> <li>Observability: Prometheus, Loki, Grafana</li> <li>Networking: Headscale (Tailscale coordination server)</li> <li>Proxying: Caddy (HTTPS reverse proxy)</li> <li>Other services: Geofeed, CHProxy, Alertmanager</li> </ul> <p>All services run in Docker containers managed by Terraform.</p>"},{"location":"getting-started/overview/#2-ixp-servers","title":"2. IXP Servers","text":"<p>Servers connected to Internet Exchange Points (IXPs) for BGP peering:</p> <ul> <li>Run BIRD routing daemon for BGP</li> <li>Connected to core via WireGuard tunnels</li> <li>Announce AS215011 routes</li> <li>Enable Internet-scale routing experiments</li> </ul>"},{"location":"getting-started/overview/#3-probing-servers-vlt","title":"3. Probing Servers (VLT)","text":"<p>Vultr instances for active measurements:</p> <ul> <li>Run Saimiris probing agents</li> <li>Distributed globally (Atlanta, Paris)</li> <li>Advertise unicast/anycast prefixes</li> <li>Send measurement data to core services</li> </ul>"},{"location":"getting-started/overview/#infrastructure-as-code","title":"Infrastructure as Code","text":"<p>Everything is managed as code:</p> <pre><code>infrastructure/\n\u251c\u2500\u2500 inventory/          # Server definitions\n\u251c\u2500\u2500 templates/          # Jinja2 templates\n\u2502   \u251c\u2500\u2500 config/        # Docker container configs\n\u2502   \u2514\u2500\u2500 terraform/     # Terraform templates\n\u251c\u2500\u2500 networks/          # BIRD &amp; WireGuard configs\n\u251c\u2500\u2500 playbooks/         # Ansible automation\n\u251c\u2500\u2500 render/            # Python rendering scripts\n\u251c\u2500\u2500 secrets/           # Encrypted secrets (Ansible Vault)\n\u2514\u2500\u2500 terraform/         # Generated Terraform files\n</code></pre>"},{"location":"getting-started/overview/#deployment-workflow","title":"Deployment Workflow","text":"<p>The main deployment workflow follows three steps:</p> <ol> <li>Render - Generate configs from templates with secrets</li> <li>Sync - Copy configs to remote servers via Ansible</li> <li>Apply - Deploy containers via Terraform</li> </ol> <p>This is automated through the <code>make apply</code> command.</p>"},{"location":"getting-started/overview/#network-architecture","title":"Network Architecture","text":""},{"location":"getting-started/overview/#docker-networks","title":"Docker Networks","text":"<p>Core server uses two Docker networks:</p> <ul> <li>backend - Internal network for service-to-service communication</li> <li>dmz - Internet-facing network for public services</li> <li>dmz-ipv4 - IPv4-only network for IPv4 proxy</li> </ul>"},{"location":"getting-started/overview/#bgp-routing","title":"BGP Routing","text":"<ul> <li>IXP servers peer with other ASes at exchange points</li> <li>Core services reachable via <code>2a06:de00:50::/44</code></li> <li>Probing infrastructure uses <code>2a0e:97c0:8a0::/44</code></li> <li>IPv6-only with IPv4 proxy for dual-stack access</li> </ul>"},{"location":"getting-started/overview/#vpn-tunnels","title":"VPN Tunnels","text":"<p>WireGuard tunnels connect:</p> <ul> <li>IXP servers \u2194 Core server</li> <li>Enables routing of nxthdr traffic through AS215011</li> </ul>"},{"location":"getting-started/overview/#special-characteristics","title":"Special Characteristics","text":""},{"location":"getting-started/overview/#template-groups","title":"Template Groups","text":"<ul> <li>core - Host-specific templates (each host has unique config)</li> <li>ixp - Shared templates (all IXP servers use same config)</li> <li>vlt - Shared templates (all VLT servers use same config)</li> </ul>"},{"location":"getting-started/overview/#secrets-management","title":"Secrets Management","text":"<ul> <li>All secrets encrypted with Ansible Vault</li> <li>Vault password stored in <code>.password</code> file (gitignored)</li> <li>Secrets injected during template rendering</li> <li>Rendered files never committed to git</li> </ul>"},{"location":"getting-started/overview/#state-management","title":"State Management","text":"<ul> <li>Terraform state committed to git (not recommended for production)</li> <li>No remote state backend currently configured</li> <li>Manual coordination required for concurrent changes</li> </ul>"},{"location":"getting-started/overview/#next-steps","title":"Next Steps","text":"<ul> <li>Setup your environment to start working with the infrastructure</li> <li>Quick Start guide to make your first deployment</li> <li>Common Tasks for day-to-day operations</li> </ul>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":"<p>This guide walks you through making your first infrastructure change.</p>"},{"location":"getting-started/quick-start/#understanding-the-workflow","title":"Understanding the Workflow","text":"<p>The main deployment command is:</p> <pre><code>make apply\n</code></pre> <p>This executes three steps:</p> <ol> <li>Render - Generate configs from Jinja2 templates</li> <li>Sync - Copy configs to servers via Ansible</li> <li>Apply - Deploy containers via Terraform</li> </ol>"},{"location":"getting-started/quick-start/#example-update-a-container-configuration","title":"Example: Update a Container Configuration","text":"<p>Let's update the Grafana configuration as an example.</p>"},{"location":"getting-started/quick-start/#step-1-locate-the-template","title":"Step 1: Locate the Template","text":"<p>Configuration templates are in <code>templates/config/{group}/{hostname}/{service}/</code>:</p> <pre><code># For Grafana on coreams01\nls templates/config/core/coreams01/grafana/\n</code></pre>"},{"location":"getting-started/quick-start/#step-2-edit-the-template","title":"Step 2: Edit the Template","text":"<p>Edit a configuration file:</p> <pre><code># Example: Edit Grafana config\nvim templates/config/core/coreams01/grafana/config/grafana.ini.j2\n</code></pre> <p>Make your changes. Jinja2 variables are available:</p> <ul> <li><code>{{ inventory_hostname }}</code> - Current host (e.g., <code>coreams01</code>)</li> <li><code>{{ secrets.grafana_admin_password }}</code> - From secrets.yml</li> <li>Any variables from <code>inventory/inventory.yml</code></li> </ul>"},{"location":"getting-started/quick-start/#step-3-render-and-preview","title":"Step 3: Render and Preview","text":"<p>Render the templates to see the output:</p> <pre><code>make render\n</code></pre> <p>Check the rendered file:</p> <pre><code>cat .rendered/coreams01/grafana/config/grafana.ini\n</code></pre> <p>Rendered Directory</p> <p>The <code>.rendered/</code> directory contains plaintext secrets and is gitignored. Never commit it!</p>"},{"location":"getting-started/quick-start/#step-4-deploy","title":"Step 4: Deploy","text":"<p>Deploy the changes:</p> <pre><code>make apply\n</code></pre> <p>This will:</p> <ol> <li>\u2705 Render templates</li> <li>\u2705 Sync to remote server</li> <li>\u2705 Apply Terraform changes</li> </ol>"},{"location":"getting-started/quick-start/#step-5-verify","title":"Step 5: Verify","text":"<p>If Terraform didn't detect changes (config-only update), restart the container:</p> <pre><code>ssh nxthdr@ams01.core.infra.nxthdr.dev\ndocker restart grafana\n</code></pre>"},{"location":"getting-started/quick-start/#example-update-a-container-image","title":"Example: Update a Container Image","text":"<p>Let's update a Docker image version.</p>"},{"location":"getting-started/quick-start/#step-1-edit-terraform-file","title":"Step 1: Edit Terraform File","text":"<pre><code>vim terraform/coreams01.tf\n</code></pre> <p>Find the image resource and update the version:</p> <pre><code>resource \"docker_image\" \"grafana\" {\n  name = \"grafana/grafana:10.2.0\"  # Update this version\n  provider = docker.coreams01\n}\n</code></pre>"},{"location":"getting-started/quick-start/#step-2-apply-changes","title":"Step 2: Apply Changes","text":"<pre><code>make apply\n</code></pre> <p>Terraform will detect the image change and recreate the container.</p>"},{"location":"getting-started/quick-start/#step-3-verify","title":"Step 3: Verify","text":"<p>Check the container is running:</p> <pre><code>ssh nxthdr@ams01.core.infra.nxthdr.dev\ndocker ps | grep grafana\n</code></pre>"},{"location":"getting-started/quick-start/#example-update-bird-configuration","title":"Example: Update BIRD Configuration","text":"<p>Network configurations are in <code>networks/{hostname}/</code>.</p>"},{"location":"getting-started/quick-start/#step-1-edit-bird-config","title":"Step 1: Edit BIRD Config","text":"<pre><code>vim networks/coreams01/bird/bird.conf\n</code></pre>"},{"location":"getting-started/quick-start/#step-2-sync-configuration","title":"Step 2: Sync Configuration","text":"<pre><code>make sync-bird\n</code></pre> <p>You'll be prompted for the BECOME password (sudo password).</p>"},{"location":"getting-started/quick-start/#step-3-verify_1","title":"Step 3: Verify","text":"<p>BIRD will automatically reload. Check status:</p> <pre><code>ssh nxthdr@ams01.core.infra.nxthdr.dev\nsudo birdc show status\n</code></pre>"},{"location":"getting-started/quick-start/#common-commands-reference","title":"Common Commands Reference","text":"Task Command Requires Sudo Full deployment <code>make apply</code> No Render only <code>make render</code> No Sync configs <code>make sync-config</code> No Update BIRD <code>make sync-bird</code> Yes Update WireGuard <code>make sync-wireguard</code> Yes Edit secrets <code>make edit-secrets</code> No"},{"location":"getting-started/quick-start/#best-practices","title":"Best Practices","text":"<ul> <li>Test on one host first for multi-host changes</li> <li>Review Terraform plan if needed: <code>terraform -chdir=./terraform plan</code></li> <li>Never commit: <code>.password</code>, <code>.rendered/</code>, <code>terraform/terraform.tfvars</code></li> </ul>"},{"location":"getting-started/quick-start/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/quick-start/#rendering-fails","title":"Rendering Fails","text":"<pre><code>Error rendering template: Undefined variable\n</code></pre> <p>Solution: Check that all variables used in templates exist in: - <code>inventory/inventory.yml</code> - <code>secrets/secrets.yml</code></p>"},{"location":"getting-started/quick-start/#ansible-sync-fails","title":"Ansible Sync Fails","text":"<pre><code>UNREACHABLE! =&gt; {\"changed\": false, \"msg\": \"Failed to connect\"}\n</code></pre> <p>Solution: Verify SSH access to the server.</p>"},{"location":"getting-started/quick-start/#container-not-updated","title":"Container Not Updated","text":"<p>After <code>make apply</code>, container still uses old config.</p> <p>Solution: Manually restart the container:</p> <pre><code>ssh nxthdr@ams01.core.infra.nxthdr.dev\ndocker restart &lt;container_name&gt;\n</code></pre>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<ul> <li>Common Tasks - Day-to-day operations</li> <li>Network Configuration - BIRD and WireGuard</li> <li>Adding Services - Add new services</li> <li>Architecture - Technical details</li> </ul>"},{"location":"getting-started/setup/","title":"Environment Setup","text":"<p>This guide will help you set up your local environment to work with the nxthdr infrastructure.</p>"},{"location":"getting-started/setup/#prerequisites","title":"Prerequisites","text":""},{"location":"getting-started/setup/#required-tools","title":"Required Tools","text":"<ol> <li>Python 3.11+ with uv package manager</li> <li>Ansible 2.9+</li> <li>Terraform 1.0+</li> <li>SSH access to infrastructure servers</li> <li>Vault password (contact admin@nxthdr.dev)</li> </ol>"},{"location":"getting-started/setup/#installation","title":"Installation","text":"macOSLinux (Ubuntu/Debian)Linux (Fedora/RHEL) <pre><code># Install Homebrew if not already installed\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n# Install required tools\nbrew install ansible terraform uv\n</code></pre> <pre><code># Install Ansible\nsudo apt update\nsudo apt install ansible\n\n# Install Terraform\nwget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\necho \"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/hashicorp.list\nsudo apt update &amp;&amp; sudo apt install terraform\n\n# Install uv\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <pre><code># Install Ansible\nsudo dnf install ansible\n\n# Install Terraform\nsudo dnf install -y dnf-plugins-core\nsudo dnf config-manager --add-repo https://rpm.releases.hashicorp.com/fedora/hashicorp.repo\nsudo dnf install terraform\n\n# Install uv\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre>"},{"location":"getting-started/setup/#repository-setup","title":"Repository Setup","text":""},{"location":"getting-started/setup/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/nxthdr/infrastructure.git\ncd infrastructure\n</code></pre>"},{"location":"getting-started/setup/#2-configure-vault-password","title":"2. Configure Vault Password","text":"<p>Create a <code>.password</code> file with the Ansible Vault password:</p> <pre><code>echo \"YOUR_VAULT_PASSWORD\" &gt; .password\nchmod 600 .password\n</code></pre> <p>Security</p> <p>The <code>.password</code> file is gitignored and should never be committed. Keep it secure!</p>"},{"location":"getting-started/setup/#3-verify-vault-access","title":"3. Verify Vault Access","text":"<p>Test that you can decrypt secrets:</p> <pre><code>make edit-secrets\n</code></pre> <p>This should open the secrets file in your editor. Close without making changes.</p>"},{"location":"getting-started/setup/#4-configure-ssh-access","title":"4. Configure SSH Access","text":"<p>Ensure you have SSH access to the infrastructure servers:</p> <pre><code># Test connection to a server\nssh nxthdr@ams01.core.infra.nxthdr.dev\n\n# If using SSH keys, add to your SSH config (~/.ssh/config)\nHost *.infra.nxthdr.dev\n    User nxthdr\n    IdentityFile ~/.ssh/id_ed25519\n</code></pre>"},{"location":"getting-started/setup/#5-initialize-terraform","title":"5. Initialize Terraform","text":"<pre><code>cd terraform\nterraform init\ncd ..\n</code></pre>"},{"location":"getting-started/setup/#verify-setup","title":"Verify Setup","text":"<p>Run a dry-run to verify everything is configured correctly:</p> <pre><code># Render templates\nmake render\n\n# Check what would be synced (dry-run)\nansible-playbook -i inventory/ playbooks/sync-config.yml --check\n\n# Check Terraform plan\nterraform -chdir=./terraform plan\n</code></pre> <p>If all commands complete without errors, your environment is ready!</p>"},{"location":"getting-started/setup/#optional-python-development-environment","title":"Optional: Python Development Environment","text":"<p>If you plan to modify the rendering scripts:</p> <pre><code>cd render\nuv sync\ncd ..\n</code></pre> <p>This creates a virtual environment with all dependencies for the rendering scripts.</p>"},{"location":"getting-started/setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/setup/#vault-decryption-fails","title":"Vault Decryption Fails","text":"<pre><code>ERROR! Decryption failed\n</code></pre> <p>Solution: Verify your <code>.password</code> file contains the correct vault password.</p>"},{"location":"getting-started/setup/#ssh-connection-refused","title":"SSH Connection Refused","text":"<pre><code>ssh: connect to host ... port 22: Connection refused\n</code></pre> <p>Solution:  - Verify you have network access to the servers - Check your SSH key is authorized - Contact admin@nxthdr.dev for access</p>"},{"location":"getting-started/setup/#terraform-provider-issues","title":"Terraform Provider Issues","text":"<pre><code>Error: Failed to query available provider packages\n</code></pre> <p>Solution: Run <code>terraform init</code> in the <code>terraform/</code> directory.</p>"},{"location":"getting-started/setup/#ansible-module-not-found","title":"Ansible Module Not Found","text":"<pre><code>ERROR! couldn't resolve module/action 'ansible.posix.synchronize'\n</code></pre> <p>Solution: Install the required Ansible collection:</p> <pre><code>ansible-galaxy collection install ansible.posix\n</code></pre>"},{"location":"getting-started/setup/#next-steps","title":"Next Steps","text":"<p>Now that your environment is set up:</p> <ul> <li>Follow the Quick Start guide to make your first deployment</li> <li>Review Common Tasks for typical operations</li> <li>Explore the Reference documentation for deeper understanding</li> </ul>"},{"location":"guides/adding-services/","title":"Adding New Services","text":"<p>This guide walks through adding a new service to the nxthdr infrastructure.</p>"},{"location":"guides/adding-services/#overview","title":"Overview","text":"<p>Adding a new service involves:</p> <ol> <li>Creating configuration templates</li> <li>Adding Terraform resources</li> <li>Deploying the service</li> <li>(Optional) Configuring proxy/certificates</li> </ol>"},{"location":"guides/adding-services/#example-adding-a-new-service","title":"Example: Adding a New Service","text":"<p>Let's add a hypothetical \"metrics-exporter\" service to the core server.</p>"},{"location":"guides/adding-services/#step-1-create-configuration-directory","title":"Step 1: Create Configuration Directory","text":"<p>Create a directory for your service configuration:</p> <pre><code>mkdir -p templates/config/core/coreams01/metrics-exporter/config\n</code></pre>"},{"location":"guides/adding-services/#step-2-add-configuration-files","title":"Step 2: Add Configuration Files","text":"<p>Create configuration files (as Jinja2 templates if needed):</p> <pre><code>vim templates/config/core/coreams01/metrics-exporter/config/config.yml.j2\n</code></pre>"},{"location":"guides/adding-services/#step-3-add-terraform-resources","title":"Step 3: Add Terraform Resources","text":"<p>Edit the Terraform file for your target host:</p> <pre><code>vim terraform/coreams01.tf\n</code></pre> <p>Add the Docker image resource:</p> <pre><code>resource \"docker_image\" \"metrics_exporter\" {\n  name = \"metrics-exporter:v1.0.0\"\n  provider = docker.coreams01\n}\n</code></pre> <p>Add the container resource:</p> <pre><code>resource \"docker_container\" \"metrics_exporter\" {\n  image = docker_image.metrics_exporter.image_id\n  name  = \"metrics-exporter\"\n  provider = docker.coreams01\n  restart = \"unless-stopped\"\n\n  # Logging\n  log_driver = \"json-file\"\n  log_opts = {\n    tag = \"{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}\"\n  }\n\n  # DNS servers\n  dns = [\"2a00:1098:2c::1\", \"2a00:1098:2b::1\"]\n\n  # Network configuration\n  network_mode = \"bridge\"\n  networks_advanced {\n    name = docker_network.backend.name\n    ipv6_address = \"2a06:de00:50:cafe:10::50\"  # Choose unused IP\n  }\n\n  # Volumes\n  volumes {\n    container_path = \"/etc/metrics-exporter/config.yml\"\n    host_path = \"/home/nxthdr/metrics-exporter/config/config.yml\"\n  }\n\n  volumes {\n    container_path = \"/var/lib/metrics-exporter\"\n    host_path = \"/home/nxthdr/metrics-exporter/data\"\n  }\n\n  # Environment variables\n  env = [\n    \"LOG_LEVEL=info\",\n    \"TZ=UTC\"\n  ]\n\n  # Expose ports (if needed for DMZ access)\n  # ports {\n  #   internal = 9100\n  #   external = 9100\n  #   protocol = \"tcp\"\n  # }\n}\n</code></pre>"},{"location":"guides/adding-services/#step-4-deploy-the-service","title":"Step 4: Deploy the Service","text":"<p>Deploy the new service:</p> <pre><code>make apply\n</code></pre> <p>This will: 1. Render the configuration template 2. Sync files to the server 3. Create the Docker container</p>"},{"location":"guides/adding-services/#step-5-verify-deployment","title":"Step 5: Verify Deployment","text":"<p>Check that the container is running:</p> <pre><code>ssh nxthdr@ams01.core.infra.nxthdr.dev\ndocker ps | grep metrics-exporter\ndocker logs metrics-exporter\n</code></pre>"},{"location":"guides/adding-services/#adding-to-ixp-or-vlt-servers","title":"Adding to IXP or VLT Servers","text":"<p>For IXP or VLT servers, the process is slightly different since they use shared templates.</p>"},{"location":"guides/adding-services/#step-1-create-shared-configuration","title":"Step 1: Create Shared Configuration","text":"<p>Create configuration in the shared group directory:</p> <pre><code>mkdir -p templates/config/ixp/metrics-exporter/config\nvim templates/config/ixp/metrics-exporter/config/config.yml.j2\n</code></pre> <p>This configuration will be used by all IXP servers.</p>"},{"location":"guides/adding-services/#step-2-update-terraform-template","title":"Step 2: Update Terraform Template","text":"<p>Edit the Terraform template for the group:</p> <pre><code>vim templates/terraform/ixp.tf.j2\n</code></pre> <p>Add your service resources using Jinja2 variables:</p> <pre><code>resource \"docker_image\" \"metrics_exporter\" {\n  name = \"metrics-exporter:v1.0.0\"\n  provider = docker.{{ inventory_hostname }}\n}\n\nresource \"docker_container\" \"metrics_exporter\" {\n  image = docker_image.metrics_exporter.image_id\n  name  = \"metrics-exporter\"\n  provider = docker.{{ inventory_hostname }}\n  restart = \"unless-stopped\"\n\n  # ... rest of configuration\n}\n</code></pre>"},{"location":"guides/adding-services/#step-3-deploy","title":"Step 3: Deploy","text":"<pre><code>make apply\n</code></pre> <p>This will deploy to all IXP servers.</p>"},{"location":"guides/adding-services/#exposing-service-via-proxy","title":"Exposing Service via Proxy","text":"<p>If your service needs HTTPS access:</p> <ol> <li> <p>Add to DMZ network in Terraform:    <pre><code>networks_advanced {\n  name = docker_network.dmz.name\n  ipv6_address = \"2a06:de00:50:cafe:100::50\"\n}\n</code></pre></p> </li> <li> <p>Update Caddyfile (<code>templates/config/core/coreams01/proxy/config/Caddyfile.j2</code>):    <pre><code>metrics.nxthdr.dev {\n    reverse_proxy [2a06:de00:50:cafe:100::50]:9100\n    tls {\n        dns cloudflare {env.CLOUDFLARE_API_TOKEN}\n    }\n}\n</code></pre></p> </li> <li> <p>Deploy: <code>make apply</code> (certificates generated automatically)</p> </li> </ol>"},{"location":"guides/adding-services/#adding-secrets","title":"Adding Secrets","text":"<p>If your service needs secrets:</p>"},{"location":"guides/adding-services/#step-1-add-to-vault","title":"Step 1: Add to Vault","text":"<pre><code>make edit-secrets\n</code></pre> <p>Add your secrets:</p> <pre><code>metrics_exporter:\n  api_key: \"your-secret-key\"\n  db_password: \"your-db-password\"\n</code></pre>"},{"location":"guides/adding-services/#step-2-use-in-templates","title":"Step 2: Use in Templates","text":"<p>Reference in your Jinja2 templates:</p> <pre><code>api_key: {{ secrets.metrics_exporter.api_key }}\ndatabase:\n  password: {{ secrets.metrics_exporter.db_password }}\n</code></pre>"},{"location":"guides/adding-services/#service-dependencies","title":"Service Dependencies","text":"<p>If your service depends on another service:</p>"},{"location":"guides/adding-services/#using-docker-networks","title":"Using Docker Networks","text":"<p>Services on the same Docker network can communicate by container name:</p> <pre><code># In metrics-exporter config\ndatabase:\n  host: clickhouse  # Container name\n  port: 9000\n</code></pre>"},{"location":"guides/adding-services/#using-depends_on-terraform","title":"Using depends_on (Terraform)","text":"<pre><code>resource \"docker_container\" \"metrics_exporter\" {\n  # ... other config\n\n  depends_on = [\n    docker_container.clickhouse\n  ]\n}\n</code></pre>"},{"location":"guides/adding-services/#persistent-data","title":"Persistent Data","text":"<p>For services that need persistent storage:</p>"},{"location":"guides/adding-services/#create-data-directory","title":"Create Data Directory","text":"<p>The directory will be created automatically when you sync configs, but you can also create it manually:</p> <pre><code>ssh nxthdr@ams01.core.infra.nxthdr.dev\nmkdir -p /home/nxthdr/metrics-exporter/data\nchown 1001:1001 /home/nxthdr/metrics-exporter/data  # Adjust UID/GID as needed\n</code></pre>"},{"location":"guides/adding-services/#mount-volume","title":"Mount Volume","text":"<p>In Terraform:</p> <pre><code>volumes {\n  container_path = \"/var/lib/metrics-exporter\"\n  host_path = \"/home/nxthdr/metrics-exporter/data\"\n}\n</code></pre>"},{"location":"guides/adding-services/#health-checks","title":"Health Checks","text":"<p>Add health checks to monitor service status:</p> <pre><code>resource \"docker_container\" \"metrics_exporter\" {\n  # ... other config\n\n  healthcheck {\n    test = [\"CMD\", \"curl\", \"-f\", \"http://localhost:9100/health\"]\n    interval = \"30s\"\n    timeout = \"3s\"\n    retries = 3\n    start_period = \"10s\"\n  }\n}\n</code></pre>"},{"location":"guides/adding-services/#monitoring-integration","title":"Monitoring Integration","text":""},{"location":"guides/adding-services/#add-to-prometheus","title":"Add to Prometheus","text":"<p>Edit Prometheus configuration:</p> <pre><code>vim templates/config/core/coreams01/prometheus/config/prometheus.yml.j2\n</code></pre> <p>Add scrape config:</p> <pre><code>scrape_configs:\n  - job_name: 'metrics-exporter'\n    static_configs:\n      - targets: ['metrics-exporter:9100']\n        labels:\n          service: 'metrics-exporter'\n          environment: 'production'\n</code></pre>"},{"location":"guides/adding-services/#add-grafana-dashboard","title":"Add Grafana Dashboard","text":"<ol> <li>Create dashboard JSON</li> <li>Place in <code>templates/config/core/coreams01/grafana/dashboards/</code></li> <li>Deploy with <code>make apply</code></li> </ol>"},{"location":"guides/adding-services/#resource-limits","title":"Resource Limits","text":"<p>Set CPU and memory limits:</p> <pre><code>resource \"docker_container\" \"metrics_exporter\" {\n  # ... other config\n\n  memory = 512  # MB\n  memory_swap = 1024  # MB\n\n  # CPU shares (relative weight)\n  cpu_shares = 1024\n}\n</code></pre>"},{"location":"guides/adding-services/#complete-example","title":"Complete Example","text":"<p>Here's a complete example for adding a Redis cache:</p> <pre><code># Docker image\nresource \"docker_image\" \"redis\" {\n  name = \"redis:7-alpine\"\n  provider = docker.coreams01\n}\n\n# Docker container\nresource \"docker_container\" \"redis\" {\n  image = docker_image.redis.image_id\n  name  = \"redis\"\n  provider = docker.coreams01\n  restart = \"unless-stopped\"\n\n  log_driver = \"json-file\"\n  log_opts = {\n    tag = \"{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}\"\n  }\n\n  dns = [\"2a00:1098:2c::1\", \"2a00:1098:2b::1\"]\n\n  network_mode = \"bridge\"\n  networks_advanced {\n    name = docker_network.backend.name\n    ipv6_address = \"2a06:de00:50:cafe:10::60\"\n  }\n\n  volumes {\n    container_path = \"/data\"\n    host_path = \"/home/nxthdr/redis/data\"\n  }\n\n  volumes {\n    container_path = \"/usr/local/etc/redis/redis.conf\"\n    host_path = \"/home/nxthdr/redis/config/redis.conf\"\n  }\n\n  command = [\"redis-server\", \"/usr/local/etc/redis/redis.conf\"]\n\n  memory = 256\n\n  healthcheck {\n    test = [\"CMD\", \"redis-cli\", \"ping\"]\n    interval = \"10s\"\n    timeout = \"3s\"\n    retries = 3\n  }\n}\n</code></pre>"},{"location":"guides/adding-services/#checklist","title":"Checklist","text":"<p>When adding a new service, verify:</p> <ul> <li> Configuration templates created</li> <li> Terraform resources added</li> <li> Secrets added to vault (if needed)</li> <li> Docker network configured correctly</li> <li> Volumes configured for persistent data</li> <li> Health checks configured</li> <li> Monitoring/logging configured</li> <li> Proxy configuration added (if public-facing)</li> <li> DNS records created (if public-facing)</li> <li> Certificates obtained (if HTTPS)</li> <li> Service tested and verified</li> <li> Documentation updated</li> </ul>"},{"location":"guides/adding-services/#next-steps","title":"Next Steps","text":"<ul> <li>Common Tasks - Day-to-day operations</li> <li>Network Configuration - BIRD and WireGuard</li> <li>Architecture - Technical details</li> </ul>"},{"location":"guides/common-tasks/","title":"Common Tasks","text":"<p>This guide covers frequently performed infrastructure operations.</p>"},{"location":"guides/common-tasks/#container-management","title":"Container Management","text":""},{"location":"guides/common-tasks/#update-container-configuration","title":"Update Container Configuration","text":"<p>When you need to change a container's configuration files:</p> <ol> <li> <p>Edit the template:    <pre><code>vim templates/config/core/coreams01/{service}/config/{file}.j2\n</code></pre></p> </li> <li> <p>Deploy:    <pre><code>make apply\n</code></pre></p> </li> <li> <p>Restart container (if Terraform didn't detect changes):    <pre><code>ssh nxthdr@ams01.core.infra.nxthdr.dev\ndocker restart {container_name}\n</code></pre></p> </li> </ol>"},{"location":"guides/common-tasks/#update-container-image-version","title":"Update Container Image Version","text":"<p>To update a Docker image to a new version:</p> <ol> <li> <p>Edit Terraform file:    <pre><code>vim terraform/{hostname}.tf\n</code></pre></p> </li> <li> <p>Update the image tag:    <pre><code>resource \"docker_image\" \"prometheus\" {\n  name = \"prom/prometheus:v2.48.0\"  # Change version here\n  provider = docker.coreams01\n}\n</code></pre></p> </li> <li> <p>Apply changes:    <pre><code>make apply\n</code></pre></p> </li> </ol> <p>Terraform will pull the new image and recreate the container.</p>"},{"location":"guides/common-tasks/#restart-a-container","title":"Restart a Container","text":"<pre><code>ssh nxthdr@ams01.core.infra.nxthdr.dev\ndocker restart {container_name}\n</code></pre>"},{"location":"guides/common-tasks/#view-container-logs","title":"View Container Logs","text":"<pre><code>ssh nxthdr@ams01.core.infra.nxthdr.dev\ndocker logs -f {container_name}\n</code></pre>"},{"location":"guides/common-tasks/#execute-commands-in-container","title":"Execute Commands in Container","text":"<pre><code>ssh nxthdr@ams01.core.infra.nxthdr.dev\ndocker exec -it {container_name} {command}\n</code></pre> <p>Example for Redpanda: <pre><code>docker exec -it redpanda rpk topic list\n</code></pre></p>"},{"location":"guides/common-tasks/#network-configuration","title":"Network Configuration","text":""},{"location":"guides/common-tasks/#update-bird-bgp-configuration","title":"Update BIRD (BGP) Configuration","text":"<ol> <li> <p>Edit configuration:    <pre><code>vim networks/{hostname}/bird/bird.conf\n</code></pre></p> </li> <li> <p>Sync to server:    <pre><code>make sync-bird\n</code></pre></p> </li> </ol> <p>Enter BECOME password when prompted.</p> <ol> <li>Verify:    <pre><code>ssh nxthdr@ams01.core.infra.nxthdr.dev\nsudo birdc show status\nsudo birdc show protocols\n</code></pre></li> </ol>"},{"location":"guides/common-tasks/#update-wireguard-configuration","title":"Update WireGuard Configuration","text":"<ol> <li> <p>Edit configuration:    <pre><code>vim networks/{hostname}/wireguard/{interface}.conf\n</code></pre></p> </li> <li> <p>Sync to server:    <pre><code>make sync-wireguard\n</code></pre></p> </li> </ol> <p>Enter BECOME password when prompted.</p> <ol> <li>Verify:    <pre><code>ssh nxthdr@ams01.core.infra.nxthdr.dev\nsudo wg show\n</code></pre></li> </ol>"},{"location":"guides/common-tasks/#secrets-management","title":"Secrets Management","text":""},{"location":"guides/common-tasks/#view-secrets","title":"View Secrets","text":"<pre><code>make edit-secrets\n</code></pre> <p>This opens <code>secrets/secrets.yml</code> in your editor.</p>"},{"location":"guides/common-tasks/#add-a-new-secret","title":"Add a New Secret","text":"<ol> <li> <p>Edit secrets file:    <pre><code>make edit-secrets\n</code></pre></p> </li> <li> <p>Add your secret:    <pre><code>new_service_password: \"your_secure_password\"\n</code></pre></p> </li> <li> <p>Save and close the editor</p> </li> <li> <p>Use in templates:    <pre><code>password={{ secrets.new_service_password }}\n</code></pre></p> </li> </ol>"},{"location":"guides/common-tasks/#rotate-a-secret","title":"Rotate a Secret","text":"<ol> <li> <p>Update the secret:    <pre><code>make edit-secrets\n</code></pre></p> </li> <li> <p>Change the value in the editor</p> </li> <li> <p>Re-render and deploy:    <pre><code>make apply\n</code></pre></p> </li> <li> <p>Restart affected services:    <pre><code>ssh nxthdr@ams01.core.infra.nxthdr.dev\ndocker restart {affected_container}\n</code></pre></p> </li> </ol>"},{"location":"guides/common-tasks/#template-management","title":"Template Management","text":""},{"location":"guides/common-tasks/#add-a-new-configuration-file","title":"Add a New Configuration File","text":"<ol> <li> <p>Create template:    <pre><code>vim templates/config/core/coreams01/{service}/config/newfile.conf.j2\n</code></pre></p> </li> <li> <p>Add content with Jinja2 variables as needed</p> </li> <li> <p>Deploy:    <pre><code>make apply\n</code></pre></p> </li> </ol> <p>The file will be synced to <code>/home/nxthdr/{service}/config/newfile.conf</code> on the server.</p>"},{"location":"guides/common-tasks/#test-template-rendering","title":"Test Template Rendering","text":"<p>Render without deploying:</p> <pre><code>make render\n</code></pre> <p>Check output:</p> <pre><code>cat .rendered/{hostname}/{service}/config/{file}\n</code></pre>"},{"location":"guides/common-tasks/#available-template-variables","title":"Available Template Variables","text":"<p>In any Jinja2 template, you have access to:</p> <ul> <li><code>{{ inventory_hostname }}</code> - Current host (e.g., <code>coreams01</code>)</li> <li><code>{{ ansible_host }}</code> - Server FQDN</li> <li><code>{{ ansible_user }}</code> - SSH user</li> <li>All group vars from <code>inventory/inventory.yml</code></li> <li>All host vars from <code>inventory/inventory.yml</code></li> <li>All secrets from <code>secrets/secrets.yml</code> via <code>{{ secrets.key_name }}</code></li> </ul>"},{"location":"guides/common-tasks/#deployment-workflows","title":"Deployment Workflows","text":""},{"location":"guides/common-tasks/#deploy-everything","title":"Deploy Everything","text":"<p>Full deployment (render, sync, apply):</p> <pre><code>make apply\n</code></pre>"},{"location":"guides/common-tasks/#deploy-only-configuration-changes","title":"Deploy Only Configuration Changes","text":"<p>If you only changed configs (no Terraform changes):</p> <pre><code>make sync-config\n</code></pre> <p>Then restart affected containers manually.</p>"},{"location":"guides/common-tasks/#deploy-only-terraform-changes","title":"Deploy Only Terraform Changes","text":"<p>If you only changed Terraform files:</p> <pre><code>terraform -chdir=./terraform apply\n</code></pre>"},{"location":"guides/common-tasks/#dry-run-preview-changes","title":"Dry Run / Preview Changes","text":"<p>Preview rendering: <pre><code>make render\ngit diff .rendered/\n</code></pre></p> <p>Preview Ansible sync: <pre><code>ansible-playbook -i inventory/ playbooks/sync-config.yml --check\n</code></pre></p> <p>Preview Terraform changes: <pre><code>terraform -chdir=./terraform plan\n</code></pre></p>"},{"location":"guides/common-tasks/#monitoring-and-debugging","title":"Monitoring and Debugging","text":""},{"location":"guides/common-tasks/#check-service-health","title":"Check Service Health","text":"<p>Access Grafana dashboards: <pre><code>https://grafana.nxthdr.dev\n</code></pre></p>"},{"location":"guides/common-tasks/#view-system-logs","title":"View System Logs","text":"<pre><code>ssh nxthdr@ams01.core.infra.nxthdr.dev\nsudo journalctl -u docker -f\n</code></pre>"},{"location":"guides/common-tasks/#check-docker-network","title":"Check Docker Network","text":"<pre><code>ssh nxthdr@ams01.core.infra.nxthdr.dev\ndocker network ls\ndocker network inspect dmz\ndocker network inspect backend\n</code></pre>"},{"location":"guides/common-tasks/#verify-container-connectivity","title":"Verify Container Connectivity","text":"<p>Test if a container can reach another:</p> <pre><code>ssh nxthdr@ams01.core.infra.nxthdr.dev\ndocker exec {container} ping -c 3 {other_container}\n</code></pre>"},{"location":"guides/common-tasks/#backup-and-recovery","title":"Backup and Recovery","text":""},{"location":"guides/common-tasks/#backup-configuration","title":"Backup Configuration","text":"<p>All configuration is in git:</p> <pre><code>git pull  # Get latest\ngit log   # Review history\n</code></pre>"},{"location":"guides/common-tasks/#backup-data-volumes","title":"Backup Data Volumes","text":"<p>Important data volumes should be backed up regularly:</p> <pre><code>ssh nxthdr@ams01.core.infra.nxthdr.dev\n# Backup example for ClickHouse\nsudo tar -czf clickhouse-backup-$(date +%Y%m%d).tar.gz /home/nxthdr/clickhouse/data/\n</code></pre>"},{"location":"guides/common-tasks/#restore-from-backup","title":"Restore from Backup","text":"<ol> <li>Stop the affected container</li> <li>Restore data from backup</li> <li>Restart the container</li> </ol> <pre><code>ssh nxthdr@ams01.core.infra.nxthdr.dev\ndocker stop clickhouse\nsudo tar -xzf clickhouse-backup-20241005.tar.gz -C /\ndocker start clickhouse\n</code></pre>"},{"location":"guides/common-tasks/#emergency-procedures","title":"Emergency Procedures","text":""},{"location":"guides/common-tasks/#rollback-a-change","title":"Rollback a Change","text":"<p>If a deployment causes issues:</p> <ol> <li> <p>Revert git commit:    <pre><code>git revert HEAD\n</code></pre></p> </li> <li> <p>Re-deploy:    <pre><code>make apply\n</code></pre></p> </li> </ol>"},{"location":"guides/common-tasks/#restart-all-containers","title":"Restart All Containers","text":"<pre><code>ssh nxthdr@ams01.core.infra.nxthdr.dev\ndocker restart $(docker ps -q)\n</code></pre> <p>Warning</p> <p>This will cause brief downtime for all services.</p>"},{"location":"guides/common-tasks/#emergency-access","title":"Emergency Access","text":"<p>If SSH is not working, use provider console:</p> <ul> <li>Scaleway: https://console.scaleway.com/</li> <li>Vultr: https://my.vultr.com/</li> <li>iFog: Contact support</li> </ul>"},{"location":"guides/common-tasks/#maintenance-tasks","title":"Maintenance Tasks","text":""},{"location":"guides/common-tasks/#update-system-packages","title":"Update System Packages","text":"<pre><code>ssh nxthdr@ams01.core.infra.nxthdr.dev\nsudo apt update &amp;&amp; sudo apt upgrade -y\n</code></pre>"},{"location":"guides/common-tasks/#clean-docker-resources","title":"Clean Docker Resources","text":"<p>Remove unused images and containers:</p> <pre><code>ssh nxthdr@ams01.core.infra.nxthdr.dev\ndocker system prune -a\n</code></pre>"},{"location":"guides/common-tasks/#check-disk-space","title":"Check Disk Space","text":"<pre><code>ssh nxthdr@ams01.core.infra.nxthdr.dev\ndf -h\ndu -sh /home/nxthdr/*\n</code></pre>"},{"location":"guides/common-tasks/#next-steps","title":"Next Steps","text":"<ul> <li>Network Configuration - BIRD and WireGuard setup</li> <li>Adding Services - Add new services</li> <li>Architecture - Technical details</li> </ul>"},{"location":"guides/network-configuration/","title":"Network Configuration","text":"<p>This guide covers BIRD (BGP routing) and WireGuard (VPN) configuration management.</p>"},{"location":"guides/network-configuration/#bird-configuration","title":"BIRD Configuration","text":"<p>BIRD is used for BGP routing on core, IXP, and VLT servers to announce AS215011 routes.</p>"},{"location":"guides/network-configuration/#configuration-files","title":"Configuration Files","text":"<p>BIRD configurations are located in <code>networks/{hostname}/bird/</code>:</p> <pre><code>networks/\n\u251c\u2500\u2500 coreams01/\n\u2502   \u2514\u2500\u2500 bird/\n\u2502       \u2514\u2500\u2500 bird.conf\n\u251c\u2500\u2500 ixpams01/\n\u2502   \u2514\u2500\u2500 bird/\n\u2502       \u251c\u2500\u2500 bird.conf\n\u2502       \u2514\u2500\u2500 peerlab.conf  # Optional\n\u2514\u2500\u2500 ...\n</code></pre> <p>Not Templated</p> <p>BIRD configs are not Jinja2 templates. They are static files copied as-is to servers.</p>"},{"location":"guides/network-configuration/#update-bird-configuration","title":"Update BIRD Configuration","text":"<ol> <li> <p>Edit the configuration:    <pre><code>vim networks/coreams01/bird/bird.conf\n</code></pre></p> </li> <li> <p>Sync to server:    <pre><code>make sync-bird\n</code></pre></p> </li> </ol> <p>This will prompt for your BECOME password (sudo password).</p> <ol> <li>Verify the change:    <pre><code>ssh nxthdr@ams01.core.infra.nxthdr.dev\nsudo birdc show status\nsudo birdc show protocols all\n</code></pre></li> </ol>"},{"location":"guides/network-configuration/#bird-playbook-details","title":"BIRD Playbook Details","text":"<p>The <code>sync-bird</code> playbook (<code>playbooks/sync-bird.yml</code>):</p> <ol> <li>Creates <code>/etc/bird</code> directory</li> <li>Copies <code>bird.conf</code> from <code>networks/{hostname}/bird/</code></li> <li>Copies optional <code>peerlab.conf</code> if it exists</li> <li>Copies systemd service file</li> <li>Reloads systemd daemon</li> <li>Reloads BIRD service</li> </ol> <p>Target hosts: <code>core</code>, <code>ixp</code>, <code>vlt</code></p>"},{"location":"guides/network-configuration/#common-bird-operations","title":"Common BIRD Operations","text":"<p>Check BIRD status: <pre><code>ssh nxthdr@ams01.core.infra.nxthdr.dev\nsudo birdc show status\n</code></pre></p> <p>View BGP sessions: <pre><code>sudo birdc show protocols\n</code></pre></p> <p>View routing table: <pre><code>sudo birdc show route\n</code></pre></p> <p>Reload BIRD configuration: <pre><code>sudo birdc configure\n</code></pre></p> <p>Restart BIRD service: <pre><code>sudo systemctl restart bird\n</code></pre></p>"},{"location":"guides/network-configuration/#example-bird-configuration","title":"Example BIRD Configuration","text":"<p>Basic structure of a BIRD config:</p> <pre><code># Router ID\nrouter id 10.0.0.1;\n\n# Logging\nlog syslog all;\n\n# Device protocol\nprotocol device {\n    scan time 10;\n}\n\n# Kernel protocol\nprotocol kernel {\n    ipv6 {\n        import none;\n        export all;\n    };\n}\n\n# Static routes\nprotocol static {\n    ipv6;\n    route 2a06:de00:50::/44 via \"wg0\";\n}\n\n# BGP template\ntemplate bgp peer_template {\n    local as 215011;\n    ipv6 {\n        import all;\n        export where source = RTS_STATIC;\n    };\n}\n\n# BGP peer\nprotocol bgp peer_example from peer_template {\n    neighbor 2001:db8::1 as 64512;\n}\n</code></pre>"},{"location":"guides/network-configuration/#wireguard-configuration","title":"WireGuard Configuration","text":"<p>WireGuard VPN tunnels connect IXP servers to the core server.</p>"},{"location":"guides/network-configuration/#configuration-files_1","title":"Configuration Files","text":"<p>WireGuard configurations are in <code>networks/{hostname}/wireguard/</code>:</p> <pre><code>networks/\n\u251c\u2500\u2500 coreams01/\n\u2502   \u2514\u2500\u2500 wireguard/\n\u2502       \u251c\u2500\u2500 wg0.conf\n\u2502       \u2514\u2500\u2500 wg1.conf\n\u251c\u2500\u2500 ixpams01/\n\u2502   \u2514\u2500\u2500 wireguard/\n\u2502       \u251c\u2500\u2500 wg0.conf\n\u2502       \u2514\u2500\u2500 wg1.conf\n\u2514\u2500\u2500 ...\n</code></pre> <p>Templated</p> <p>WireGuard configs are Jinja2 templates and can use variables from inventory and secrets.</p>"},{"location":"guides/network-configuration/#update-wireguard-configuration","title":"Update WireGuard Configuration","text":"<ol> <li> <p>Edit the configuration:    <pre><code>vim networks/coreams01/wireguard/wg0.conf\n</code></pre></p> </li> <li> <p>Sync to server:    <pre><code>make sync-wireguard\n</code></pre></p> </li> </ol> <p>This will prompt for your BECOME password.</p> <ol> <li>Verify the tunnel:    <pre><code>ssh nxthdr@ams01.core.infra.nxthdr.dev\nsudo wg show\n</code></pre></li> </ol>"},{"location":"guides/network-configuration/#wireguard-playbook-details","title":"WireGuard Playbook Details","text":"<p>The <code>sync-wireguard</code> playbook (<code>playbooks/sync-wireguard.yml</code>):</p> <ol> <li>Templates all files from <code>networks/{hostname}/wireguard/</code></li> <li>Copies to <code>/etc/wireguard/</code> on remote server</li> <li>Restarts <code>wg-quick@wg0.service</code></li> <li>Restarts <code>wg-quick@wg1.service</code></li> </ol> <p>Target hosts: <code>core</code>, <code>ixp</code></p>"},{"location":"guides/network-configuration/#common-wireguard-operations","title":"Common WireGuard Operations","text":"<p>Check tunnel status: <pre><code>ssh nxthdr@ams01.core.infra.nxthdr.dev\nsudo wg show\n</code></pre></p> <p>Restart WireGuard interface: <pre><code>sudo systemctl restart wg-quick@wg0\n</code></pre></p> <p>View WireGuard logs: <pre><code>sudo journalctl -u wg-quick@wg0 -f\n</code></pre></p> <p>Test connectivity through tunnel: <pre><code>ping6 &lt;remote_tunnel_ip&gt;\n</code></pre></p>"},{"location":"guides/network-configuration/#example-wireguard-configuration","title":"Example WireGuard Configuration","text":"<p>Basic WireGuard interface config:</p> <pre><code>[Interface]\nAddress = 10.0.1.1/24, fd00::1/64\nListenPort = 51820\nPrivateKey = {{ secrets.wireguard_private_key }}\n\n# Peer configuration\n[Peer]\nPublicKey = &lt;peer_public_key&gt;\nEndpoint = peer.example.com:51820\nAllowedIPs = 10.0.1.2/32, fd00::2/128\nPersistentKeepalive = 25\n</code></pre>"},{"location":"guides/network-configuration/#generate-wireguard-keys","title":"Generate WireGuard Keys","text":"<p>To create new WireGuard keys:</p> <pre><code># Generate private key\nwg genkey\n\n# Generate public key from private key\necho \"&lt;private_key&gt;\" | wg pubkey\n</code></pre> <p>Store the private key in <code>secrets/secrets.yml</code>:</p> <pre><code>make edit-secrets\n</code></pre> <p>Add: <pre><code>wireguard_private_key_wg0: \"&lt;private_key&gt;\"\n</code></pre></p> <p>Use in config: <pre><code>PrivateKey = {{ secrets.wireguard_private_key_wg0 }}\n</code></pre></p>"},{"location":"guides/network-configuration/#network-topology","title":"Network Topology","text":""},{"location":"guides/network-configuration/#core-to-ixp-tunnels","title":"Core to IXP Tunnels","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  coreams01  \u2502\u25c4\u2500\u2500\u2500\u2500 WireGuard \u2500\u2500\u2500\u2500\u25ba\u2502  ixpams01   \u2502\n\u2502  (Core)     \u2502      Tunnel         \u2502  (IXP)      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      \u2502                                    \u2502\n      \u2502 Announces                          \u2502 Peers with\n      \u2502 2a06:de00:50::/44                 \u2502 other ASes\n      \u2502                                    \u2502\n      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n           Traffic flows through AS215011\n</code></pre>"},{"location":"guides/network-configuration/#prefix-announcements","title":"Prefix Announcements","text":"<ul> <li>Core services: <code>2a06:de00:50::/44</code></li> <li>Announced by core to IXP servers</li> <li> <p>IXP servers propagate to Internet via BGP</p> </li> <li> <p>Probing infrastructure: <code>2a0e:97c0:8a0::/44</code></p> </li> <li>Announced by VLT servers</li> <li>Enables unicast/anycast measurements</li> </ul>"},{"location":"guides/network-configuration/#firewall-configuration","title":"Firewall Configuration","text":""},{"location":"guides/network-configuration/#docker-firewall-rules","title":"Docker Firewall Rules","text":"<p>By default, Docker networks are isolated. To allow external access:</p> <pre><code>ssh nxthdr@ams01.core.infra.nxthdr.dev\nsudo ip6tables -I DOCKER-USER -d 2a06:de00:50:cafe:100::/80 -j ACCEPT\n</code></pre> <p>This allows traffic to the DMZ network.</p> <p>Manual Configuration</p> <p>This firewall rule is not managed by the infrastructure code and must be applied manually.</p>"},{"location":"guides/network-configuration/#view-current-rules","title":"View Current Rules","text":"<pre><code>ssh nxthdr@ams01.core.infra.nxthdr.dev\nsudo ip6tables -L DOCKER-USER -n -v\n</code></pre>"},{"location":"guides/network-configuration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guides/network-configuration/#bird-not-starting","title":"BIRD Not Starting","text":"<p>Check logs: <pre><code>sudo journalctl -u bird -n 50\n</code></pre></p> <p>Common issues: - Syntax error in config: <code>sudo bird -p -c /etc/bird/bird.conf</code> - Port already in use: <code>sudo netstat -tulpn | grep 179</code> - Missing dependencies: <code>sudo apt install bird2</code></p>"},{"location":"guides/network-configuration/#wireguard-tunnel-down","title":"WireGuard Tunnel Down","text":"<p>Check interface status: <pre><code>sudo wg show\nsudo ip link show wg0\n</code></pre></p> <p>Common issues: - Firewall blocking UDP port: <code>sudo ufw allow 51820/udp</code> - Incorrect endpoint: Check <code>Endpoint</code> in config - Key mismatch: Verify public/private key pairs</p> <p>Restart tunnel: <pre><code>sudo systemctl restart wg-quick@wg0\n</code></pre></p>"},{"location":"guides/network-configuration/#bgp-session-not-establishing","title":"BGP Session Not Establishing","text":"<p>Check BIRD logs: <pre><code>sudo birdc show protocols all peer_name\n</code></pre></p> <p>Common issues: - Incorrect neighbor IP - AS number mismatch - Firewall blocking TCP port 179 - Peer not configured on remote side</p> <p>Test connectivity: <pre><code>ping6 &lt;peer_ipv6&gt;\ntelnet &lt;peer_ipv6&gt; 179\n</code></pre></p>"},{"location":"guides/network-configuration/#routes-not-propagating","title":"Routes Not Propagating","text":"<p>Check export filters: <pre><code>sudo birdc show route export peer_name\n</code></pre></p> <p>Verify static routes: <pre><code>sudo birdc show route protocol static_routes\n</code></pre></p> <p>Check kernel routing table: <pre><code>ip -6 route show\n</code></pre></p>"},{"location":"guides/network-configuration/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Test BIRD config syntax before deploying:    <pre><code>sudo bird -p -c /etc/bird/bird.conf\n</code></pre></p> </li> <li> <p>Monitor BGP sessions after changes:    <pre><code>sudo birdc show protocols\n</code></pre></p> </li> <li> <p>Keep WireGuard keys secure in Ansible Vault</p> </li> <li> <p>Document peering arrangements in comments</p> </li> <li> <p>Use BGP communities for route tagging and filtering</p> </li> <li> <p>Set up monitoring for tunnel and BGP session status</p> </li> </ol>"},{"location":"guides/network-configuration/#next-steps","title":"Next Steps","text":"<ul> <li>Adding Services - Add new services</li> <li>Common Tasks - Day-to-day operations</li> <li>Architecture - Technical details</li> </ul>"},{"location":"reference/architecture/","title":"Architecture Reference","text":"<p>This page provides detailed technical information about the infrastructure architecture.</p>"},{"location":"reference/architecture/#system-components","title":"System Components","text":""},{"location":"reference/architecture/#core-server-coreams01","title":"Core Server (coreams01)","text":"<p>Provider: Scaleway Dedibox Location: Amsterdam, Netherlands Role: Central hub for all nxthdr services</p> <p>Services Running:</p> Service Purpose Port Network ClickHouse Time-series database 9000, 8123 backend PostgreSQL Relational database 5432 backend Redpanda Kafka-compatible streaming 9092, 8082 backend Prometheus Metrics collection 9090 backend Loki Log aggregation 3100 backend Grafana Observability dashboards 3000 dmz Headscale Tailscale coordination 8080 dmz Caddy (proxy) HTTPS reverse proxy 443 dmz Caddy (proxy-ipv4) IPv4 proxy 443 dmz-ipv4 Alertmanager Alert routing 9093 backend CHProxy ClickHouse proxy 9000 backend"},{"location":"reference/architecture/#ixp-servers","title":"IXP Servers","text":"<p>Purpose: BGP peering at Internet Exchange Points</p> Server Provider Location IXPs ixpams01 iFog Amsterdam NL-IX ixpams02 iFog Amsterdam - ixpfra01 iFog Frankfurt LocIX, FogIXP <p>Services Running: - BIRD (BGP routing daemon) - WireGuard (VPN to core) - Alloy (metrics collection) - cAdvisor (container metrics) - hsflowd (sFlow export)</p>"},{"location":"reference/architecture/#probing-servers-vlt","title":"Probing Servers (VLT)","text":"<p>Purpose: Active measurement infrastructure</p> Server Provider Location Prefix vltatl01 Vultr Atlanta, USA 2a0e:97c0:8a3::/48 vltcdg01 Vultr Paris, France 2a0e:97c0:8a4::/48 <p>Services Running: - Saimiris (probing agent) - Alloy (metrics collection) - cAdvisor (container metrics) - hsflowd (sFlow export)</p>"},{"location":"reference/architecture/#network-architecture","title":"Network Architecture","text":""},{"location":"reference/architecture/#ip-addressing","title":"IP Addressing","text":"<p>Core Server Networks:</p> <pre><code>DMZ Network (IPv6):     2a06:de00:50:cafe:100::/80\nDMZ Network (IPv4):     172.18.0.0/16\nBackend Network (IPv6): 2a06:de00:50:cafe:10::/80\nBackend Network (IPv4): 172.19.0.0/16\n</code></pre> <p>Public Prefixes:</p> <pre><code>Core Services:   2a06:de00:50::/44 (announced via AS215011)\nProbing:         2a0e:97c0:8a0::/44 (announced via AS215011)\n</code></pre>"},{"location":"reference/architecture/#docker-networks","title":"Docker Networks","text":""},{"location":"reference/architecture/#backend-network","title":"Backend Network","text":"<p>Internal network for service-to-service communication.</p> <p>Characteristics: - Not accessible from Internet - IPv4 and IPv6 enabled - Services communicate by container name (Docker DNS)</p> <p>Example Services: - ClickHouse: <code>2a06:de00:50:cafe:10::10</code> - PostgreSQL: <code>2a06:de00:50:cafe:10::11</code> - Redpanda: <code>2a06:de00:50:cafe:10::12</code></p>"},{"location":"reference/architecture/#dmz-network","title":"DMZ Network","text":"<p>Internet-facing network for public services.</p> <p>Characteristics: - Accessible from Internet via proxy - IPv6 only - Requires firewall rule: <code>ip6tables -I DOCKER-USER -d 2a06:de00:50:cafe:100::/80 -j ACCEPT</code></p> <p>Example Services: - Grafana: <code>2a06:de00:50:cafe:100::20</code> - Headscale: <code>2a06:de00:50:cafe:100::21</code> - Proxy: <code>2a06:de00:50:cafe:100::a</code></p>"},{"location":"reference/architecture/#dmz-ipv4-network","title":"DMZ-IPv4 Network","text":"<p>IPv4-only network for IPv4 proxy.</p> <p>Purpose: Provide IPv4 access to IPv6-only services</p>"},{"location":"reference/architecture/#bgp-routing","title":"BGP Routing","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   IXP       \u2502\n\u2502   Peers     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502 BGP\n       \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510      WireGuard      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  IXP Server \u2502\u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2502 Core Server \u2502\n\u2502  (BIRD)     \u2502      Tunnel          \u2502  (BIRD)     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502                                    \u2502\n       \u2502 Announces                          \u2502 Announces\n       \u2502 2a06:de00:50::/44                 \u2502 to IXP servers\n       \u2502                                    \u2502\n       \u25bc                                    \u25bc\n   Internet                            Services\n</code></pre> <p>Routing Flow: 1. Core server announces <code>2a06:de00:50::/44</code> to IXP servers via WireGuard 2. IXP servers announce to Internet via BGP at IXPs 3. Traffic destined for nxthdr services routes through IXP servers 4. IXP servers forward to core via WireGuard tunnel</p>"},{"location":"reference/architecture/#data-flow","title":"Data Flow","text":""},{"location":"reference/architecture/#measurement-data-pipeline","title":"Measurement Data Pipeline","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 VLT Servers \u2502\n\u2502 (Saimiris)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502 Sends probes\n       \u2502 via Redpanda\n       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Redpanda   \u2502\u2500\u2500\u2500\u2500\u2500\u25ba\u2502 ClickHouse  \u2502\n\u2502  (Kafka)    \u2502      \u2502 (Storage)   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2502\n                            \u2502 Query\n                            \u25bc\n                     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                     \u2502   Grafana   \u2502\n                     \u2502 (Visualize) \u2502\n                     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"reference/architecture/#observability-pipeline","title":"Observability Pipeline","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Services   \u2502\u2500\u2500\u2500\u2500\u2500\u25ba\u2502 Prometheus  \u2502\u2500\u2500\u2500\u2500\u2500\u25ba\u2502   Grafana   \u2502\n\u2502  (Metrics)  \u2502      \u2502 (Scrape)    \u2502      \u2502  (Display)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Services   \u2502\u2500\u2500\u2500\u2500\u2500\u25ba\u2502    Loki     \u2502\u2500\u2500\u2500\u2500\u2500\u25ba\u2502   Grafana   \u2502\n\u2502  (Logs)     \u2502      \u2502 (Aggregate) \u2502      \u2502  (Display)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"reference/architecture/#infrastructure-as-code-architecture","title":"Infrastructure as Code Architecture","text":""},{"location":"reference/architecture/#template-rendering-pipeline","title":"Template Rendering Pipeline","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 inventory.yml   \u2502\n\u2502 secrets.yml     \u2502\n\u2502 templates/      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u2502 render_config.py\n         \u2502 render_terraform.py\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  .rendered/     \u2502  (gitignored)\n\u2502  terraform/     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u2502 Ansible sync\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Remote Servers  \u2502\n\u2502 /home/nxthdr/   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u2502 Terraform apply\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Docker          \u2502\n\u2502 Containers      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"reference/architecture/#rendering-process","title":"Rendering Process","text":"<p>render_config.py: 1. Loads <code>inventory/inventory.yml</code> 2. Decrypts <code>secrets/secrets.yml</code> with vault password 3. For each host:    - Loads group vars    - Loads host vars    - Merges with secrets    - Renders templates from <code>templates/config/{group}/{hostname}/</code>    - Outputs to <code>.rendered/{hostname}/</code></p> <p>render_terraform.py: 1. Loads inventory and secrets 2. Renders <code>templates/terraform/providers.tf.j2</code> \u2192 <code>terraform/providers.tf</code> 3. Renders <code>templates/terraform/terraform.tfvars.j2</code> \u2192 <code>terraform/terraform.tfvars</code> 4. For IXP/VLT hosts:    - Renders <code>templates/terraform/{group}.tf.j2</code> \u2192 <code>terraform/{hostname}.tf</code></p>"},{"location":"reference/architecture/#security-architecture","title":"Security Architecture","text":""},{"location":"reference/architecture/#secrets-management","title":"Secrets Management","text":"<p>Ansible Vault: - All secrets encrypted in <code>secrets/secrets.yml</code> - AES256 encryption - Password stored in <code>.password</code> (gitignored) - Decrypted during rendering, never committed in plaintext</p> <p>Secret Types: - Database passwords - API tokens (Cloudflare, etc.) - WireGuard private keys - Service credentials</p>"},{"location":"reference/architecture/#network-security","title":"Network Security","text":"<p>Firewall: - Docker networks isolated by default - Manual firewall rules for DMZ access - WireGuard tunnels for IXP \u2194 Core communication</p> <p>Access Control: - SSH key-based authentication - No password authentication - Sudo required for system-level changes</p>"},{"location":"reference/architecture/#ssltls","title":"SSL/TLS","text":"<p>Certificate Management: - Automatic via Let's Encrypt - DNS-01 challenge with Cloudflare - Caddy handles renewal automatically - Certificates synced to IPv4 proxy manually</p>"},{"location":"reference/architecture/#deployment-architecture","title":"Deployment Architecture","text":""},{"location":"reference/architecture/#terraform-state","title":"Terraform State","text":"<p>Current Setup: - State stored in git repository - No remote backend - Manual coordination required</p> <p>Providers: - Docker provider for container management - Connects to Docker daemon via SSH</p>"},{"location":"reference/architecture/#ansible-inventory","title":"Ansible Inventory","text":"<p>Structure: <pre><code>{group}:\n  hosts:\n    {hostname}:\n      ansible_host: {fqdn}\n      {host_vars}\n  vars:\n    ansible_user: nxthdr\n    {group_vars}\n</code></pre></p> <p>Groups: - <code>core</code>: Core servers - <code>ixp</code>: IXP servers - <code>vlt</code>: Probing servers</p>"},{"location":"reference/architecture/#scalability-considerations","title":"Scalability Considerations","text":""},{"location":"reference/architecture/#current-limitations","title":"Current Limitations","text":"<ol> <li>Single core server: No redundancy</li> <li>Terraform state in git: Not suitable for team collaboration</li> <li>Manual certificate sync: Requires manual intervention</li> <li>IPv6-only core: Requires IPv4 proxy for dual-stack</li> </ol>"},{"location":"reference/architecture/#future-improvements","title":"Future Improvements","text":"<ol> <li>Core redundancy: Multiple core servers with load balancing</li> <li>Remote Terraform state: Use S3/GCS backend</li> <li>Automated certificate sync: Sync via Ansible playbook</li> <li>Dual-stack core: Native IPv4 support</li> </ol>"},{"location":"reference/architecture/#monitoring-architecture","title":"Monitoring Architecture","text":""},{"location":"reference/architecture/#metrics-collection","title":"Metrics Collection","text":"<p>Prometheus Scraping: - All services expose <code>/metrics</code> endpoint - Prometheus scrapes every 15s - Retention: 15 days</p> <p>Exporters: - cAdvisor: Container metrics - Node Exporter: System metrics (if installed) - Custom exporters: Service-specific metrics</p>"},{"location":"reference/architecture/#log-aggregation","title":"Log Aggregation","text":"<p>Loki Pipeline: - Docker logs forwarded to Loki - Structured logging with labels - Retention: 30 days</p>"},{"location":"reference/architecture/#alerting","title":"Alerting","text":"<p>Alertmanager: - Receives alerts from Prometheus - Routes to appropriate channels - Deduplication and grouping</p>"},{"location":"reference/architecture/#next-steps","title":"Next Steps","text":"<ul> <li>Directory Structure - Detailed file organization</li> <li>Makefile Commands - Command reference</li> <li>Secrets Management - Working with secrets</li> <li>Troubleshooting - Common issues</li> </ul>"}]}