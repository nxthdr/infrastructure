local.file_match "containers" {
        path_targets = [{
                __address__ = "localhost",
                __path__    = "/var/lib/docker/containers/*/*log",
                host        = "coreams01",
                job         = "containerlogs",
        }]
}

loki.process "containers" {
        forward_to = [loki.write.default.receiver]

        stage.json {
                expressions = {
                        attrs  = "",
                        output = "log",
                        stream = "stream",
                }
        }

        stage.json {
                expressions = {
                        tag = "",
                }
                source = "attrs"
        }

        stage.regex {
                expression = "(?P<image_name>(?:[^|]*[^|])).(?P<container_name>(?:[^|]*[^|])).(?P<image_id>(?:[^|]*[^|])).(?P<container_id>(?:[^|]*[^|]))"
                source     = "tag"
        }

        stage.timestamp {
                source = "time"
                format = "RFC3339Nano"
        }

        stage.labels {
                values = {
                        container_id   = null,
                        container_name = null,
                        image_id       = null,
                        image_name     = null,
                        stream         = null,
                        tag            = null,
                }
        }

        stage.output {
                source = "output"
        }
}

loki.source.file "containers" {
        targets               = local.file_match.containers.targets
        forward_to            = [loki.process.containers.receiver]
        legacy_positions_file = "/tmp/positions.yaml"
}


discovery.relabel "syslog" {
    targets = []

    rule {
        source_labels = ["__syslog_message_hostname"]
        target_label  = "host"
    }

    rule {
        source_labels = ["__syslog_message_hostname"]
        target_label  = "hostname"
    }

    rule {
        source_labels = ["__syslog_message_severity"]
        target_label  = "level"
    }

    rule {
        source_labels = ["__syslog_message_app_name"]
        target_label  = "application"
    }

    rule {
        source_labels = ["__syslog_message_facility"]
        target_label  = "facility"
    }

    rule {
        source_labels = ["__syslog_connection_hostname"]
        target_label  = "connection_hostname"
    }
}

loki.source.syslog "syslog" {
    listener {
        address      = "0.0.0.0:601"
        protocol     = "tcp"
        idle_timeout = "0s"
        use_rfc5424_message = true
        labels       = { job = "syslog", component = "loki.source.syslog", protocol = "tcp" }
        max_message_length = 0
    }
    listener {
        address      = "0.0.0.0:514"
        protocol     = "udp"
        idle_timeout = "0s"
        use_rfc5424_message = true
        labels       = { job = "syslog", component = "loki.source.syslog", protocol = "udp" }
        max_message_length = 0
    }
    forward_to    = [loki.write.default.receiver]
    relabel_rules = discovery.relabel.syslog.rules
}

loki.write "default" {
    endpoint {
        url = "https://loki.nxthdr.dev/loki/api/v1/push"

        basic_auth {
            username = "admin"
            password = "{{ loki.password }}"
        }
    }
}

// Self monitoring
prometheus.exporter.self "default" {
}

prometheus.scrape "metamonitoring" {
  targets    = prometheus.exporter.self.default.targets
  forward_to = [prometheus.relabel.alloy_job_relabel.receiver]
}

prometheus.relabel "alloy_job_relabel" {
    rule {
        source_labels = ["job"]
        target_label  = "job"
        replacement   = "alloy"
    }

    forward_to = [prometheus.relabel.instance_relabel.receiver]
}

prometheus.relabel "instance_relabel" {
    rule {
        source_labels = ["instance"]
        target_label  = "instance"
        replacement   = "{{ inventory_hostname }}"
    }

    forward_to = [prometheus.remote_write.default.receiver]
}

prometheus.remote_write "default" {
    endpoint {
        url = "https://prometheus.nxthdr.dev/api/v1/write"

        basic_auth {
            username = "admin"
            password = "{{ prometheus.password }}"
        }
    }
}
