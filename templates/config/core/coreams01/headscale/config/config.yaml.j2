---
# Headscale configuration
# https://headscale.net/stable/ref/configuration/

# The url clients will connect to.
# Typically this will be the publicly available URL of the service.
server_url: https://headscale.nxthdr.dev

# Address to listen to / bind to on the server
# Using :: to listen on both IPv4 and IPv6
listen_addr: "[::]:8080"

# Address to listen to /metrics, you may want
# to keep this endpoint private to your internal
# network
metrics_listen_addr: "[::]:9090"

# Address to listen for gRPC.
# gRPC is used for controlling a headscale server
# remotely with the gRPC API.
# Note: Remote access is _not_ secure and should
# only be used in a trusted network, as the traffic
# is unencrypted.
grpc_listen_addr: "[::]:50443"

# Allow the gRPC admin interface to run in INSECURE
# mode. This is not recommended as the traffic is
# unencrypted. Only enable if you know what you are
# doing.
grpc_allow_insecure: false

# Private key used to encrypt the traffic between
# headscale and Tailscale clients.
# The key is generated automatically if it does not
# exist. The key can be generated with:
# "headscale generate private-key"
private_key_path: /var/lib/headscale/private.key

# The Noise private key is used to encrypt the
# traffic between headscale and Tailscale
# clients when using the new Noise-based protocol.
noise:
  private_key_path: /var/lib/headscale/noise_private.key

# List of IP prefixes to allocate tailaddresses from.
# Each prefix consists of either an IPv4 or IPv6 address,
# and the associated prefix length, delimited by a slash.
# It must be within IP ranges supported by the Tailscale
# client - i.e., subnets of 100.64.0.0/10 and fd7a:115c:a1e0::/48.
# See https://tailscale.com/kb/1015/100.x-addresses/
# IPv6: https://tailscale.com/kb/1201/ipv6/
prefixes:
  v6: fd7a:115c:a1e0::/48
  v4: 100.64.0.0/10

# DERP is a relay system that Tailscale uses when
# a direct path cannot be found or opened.
# https://tailscale.com/blog/how-tailscale-works/
derp:
  server:
    # If enabled, runs an embedded DERP server in headscale.
    # The DERP server runs on the same port as the headscale
    # service. This is useful if you want to run a DERP server
    # without having to deploy a separate server.
    enabled: false

  urls:
    - https://controlplane.tailscale.com/derpmap/default

  # Locally available DERP map. Paths are relative to the directory
  # where headscale is running.
  paths: []

  # If enabled, a worker will be set up to periodically
  # refresh the given sources and update the derpmap
  # will be set up.
  auto_update_enabled: true

  # How often should we check for DERP updates?
  update_frequency: 24h

# Disables the automatic check for headscale updates on startup
disable_check_updates: false

# Time before an inactive ephemeral node is deleted?
ephemeral_node_inactivity_timeout: 30m

# Period to check for node updates within the tailnet.
# A value too low will cause many updates, a value too
# high (over 60s) will cause problems for the nodes,
# as they won't get updates or keep alive messages
# in time.
node_update_check_interval: 10s

# Database configuration
database:
  # Database type. Available options: sqlite, postgres
  type: sqlite

  # Enable debug mode. This setting requires the log.level to be set to "debug" or "trace".
  debug: false

  # SQLite configuration
  sqlite:
    # Path to the SQLite database file
    path: /var/lib/headscale/db.sqlite

    # Enable WAL mode for SQLite
    write_ahead_log: true

  # # PostgreSQL configuration (not recommended)
  # postgres:
  #   host: localhost
  #   port: 5432
  #   name: headscale
  #   user: foo
  #   pass: bar
  #   # If using a Unix socket, set the socket path in 'host' and leave 'port' undefined
  #   # max_open_conns: 10
  #   # max_idle_conns: 10
  #   # conn_max_idle_time_secs: 3600

  # GORM configuration settings
  gorm:
    # Enable prepared statements
    prepare_stmt: true
    # Enable parameterized queries
    parameterized_queries: true
    # Skip logging "record not found" errors
    skip_err_record_not_found: true
    # Threshold for slow queries in milliseconds
    slow_threshold: 1000

### TLS configuration
#
## Let's encrypt / ACME
#
# headscale supports automatically requesting and setting up
# TLS for a domain with Let's Encrypt.
#
# URL to ACME directory
acme_url: https://acme-v02.api.letsencrypt.org/directory

# Email to register with ACME provider
acme_email: ""

# Domain name to request a TLS certificate for:
tls_letsencrypt_hostname: ""

# Path to store certificates and metadata needed by
# letsencrypt
# For production:
tls_letsencrypt_cache_dir: /var/lib/headscale/cache

# Type of ACME challenge to use, currently supported types:
# HTTP-01 or TLS-ALPN-01
# See [docs/tls.md](docs/tls.md) for more information
tls_letsencrypt_challenge_type: HTTP-01
# When HTTP-01 challenge is chosen, letsencrypt must set up a
# verification endpoint, and it will be listening on:
# :http = port 80
tls_letsencrypt_listen: ":http"

## Use already defined certificates:
tls_cert_path: ""
tls_key_path: ""

log:
  # Output formatting for logs: text or json
  format: text
  level: info

# Policy configuration
# Path to a file containing ACL policies.
# ACLs can be defined as YAML or HUJSON.
# https://tailscale.com/kb/1018/acls/
policy:
  path: ""

## DNS
#
# headscale supports Tailscale's DNS configuration and MagicDNS.
# Please have a look to their KB to better understand the concepts:
#
# - https://tailscale.com/kb/1054/dns/
# - https://tailscale.com/kb/1081/magicdns/
# - https://tailscale.com/blog/2021-09-private-dns-with-magicdns/
#
dns:
  # Whether to prefer using Headscale provided DNS or use local.
  override_local_dns: false

  # List of DNS servers to expose to clients.
  nameservers:
    global:
      - 1.1.1.1
      - 1.0.0.1
      - 2606:4700:4700::1111
      - 2606:4700:4700::1001

  # NextDNS (see https://tailscale.com/kb/1218/nextdns/).
  # "abc123" is example NextDNS ID, replace with yours.
  #
  # With metadata sharing:
  # nameservers:
  #   - https://dns.nextdns.io/abc123
  #
  # Without metadata sharing:
  # nameservers:
  #   - 2a07:a8c0::ab:c123
  #   - 2a07:a8c1::ab:c123
  #   - 45.90.28.0
  #   - 45.90.30.0

  # Split DNS (see https://tailscale.com/kb/1054/dns/),
  # list of search domains and the DNS to query for each one.
  #
  # restricted_nameservers:
  #   foo.bar.com:
  #     - 1.1.1.1
  #   darp.headscale.net:
  #     - 1.1.1.1
  #     - 8.8.8.8

  # Search domains to inject.
  domains: []

  # Extra DNS records
  # so far only A-records are supported (on the tailscale side)
  # See https://github.com/juanfont/headscale/blob/main/docs/dns-records.md#Limitations
  # extra_records:
  #   - name: "grafana.myvpn.example.com"
  #     type: "A"
  #     value: "100.64.0.3"
  #
  #   # you can also put it in one line
  #   - { name: "prometheus.myvpn.example.com", type: "A", value: "100.64.0.3" }

  # Whether to use [MagicDNS](https://tailscale.com/kb/1081/magicdns/).
  # Only works if there is at least a nameserver defined.
  magic_dns: false

  # Defines the base domain to create the hostnames for MagicDNS.
  # `base_domain` must be a FQDNs, without the trailing dot.
  # The FQDN of the hosts will be
  # `hostname.user.base_domain` (e.g., _myhost.myuser.example.com_).
  base_domain: tailnet.nxthdr.dev

# Unix socket used for the CLI to connect without authentication
# Note: for production you will want to set this to something like:
unix_socket: /var/run/headscale/headscale.sock
unix_socket_permission: "0770"

# Enable pprof debug endpoint on the metrics listener
pprof_enabled: false

# OIDC configuration
oidc:
  only_start_if_oidc_is_available: true
  issuer: "https://csy8pa.logto.app/oidc"
  client_id: "{{ headscale.oidc.client_id }}"
  client_secret: "{{ headscale.oidc.client_secret }}"

  # The amount of time from a node is authenticated with OpenID until it
  # expires and needs to reauthenticate.
  # Setting the value to "0" will mean no expiry.
  expiry: 180d

  # Use the expiry from the token received from OpenID when the user logged
  # in, this will typically lead to frequent need to reauthenticate and should
  # only been enabled if you know what you are doing.
  # Note: enabling this will cause `oidc.expiry` to be ignored.
  use_expiry_from_token: false

  # Customize the scopes used in the OIDC flow
  scope: ["openid", "profile", "email"]
#   extra_params:
#     domain_hint: example.com
#
#   # List allowed principal domains and/or users. If an authenticated user's domain is not in this list, the
#   # authentication request will be rejected.
#
#   allowed_domains:
#     - example.com
#   # Note: Groups from keycloak have a leading '/'
#   allowed_groups:
#     - /headscale
#   allowed_users:
#     - alice@example.com
#
#   # Optional: PKCE (Proof Key for Code Exchange) configuration
#   # PKCE adds an additional layer of security to the OAuth 2.0 authorization code flow
#   # by preventing authorization code interception attacks
#   # See https://datatracker.ietf.org/doc/html/rfc7636
#   pkce:
#     # Enable or disable PKCE support (default: false)
#     enabled: false
#     # PKCE method to use:
#     # - plain: Use plain code verifier
#     # - S256: Use SHA256 hashed code verifier (default, recommended)
#     method: S256

# Logtail configuration
# Logtail is Tailscales logging and auditing infrastructure, it allows the control panel
# to instruct tailscale nodes to log their activity to a remote server.
logtail:
  # Enable logtail for this headscales clients.
  # As there is currently no support for overriding the log server in headscale, this is
  # disabled by default. Enabling this will make your clients send logs to Tailscale Inc.
  enabled: false

# Enabling this option makes devices prefer a random port for WireGuard traffic over the
# default static port 41641. This option is intended as a workaround for some buggy
# firewall devices. See https://tailscale.com/kb/1181/firewalls/ for more information.
randomize_client_port: false
