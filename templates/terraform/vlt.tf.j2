# WARNING
# This file is generated by render/ scripts and should not be edited directly.
#

resource "docker_network" "{{ inventory_hostname }}_backend" {
  name     = "backend"
  provider = docker.{{ inventory_hostname }}
  driver   = "bridge"
  ipv6     = true
  ipam_config {
    subnet = "172.18.0.0/16"
    gateway = "172.18.0.1"
  }
  ipam_config {
    subnet = "fdf5:d891:ede::/64"
    gateway = "fdf5:d891:ede::1"
  }
}

# Alloy
resource "docker_image" "{{ inventory_hostname }}_alloy" {
  name     = "grafana/alloy:v1.11.0"
  provider = docker.{{ inventory_hostname }}
}

resource "docker_container" "{{ inventory_hostname }}_alloy" {
  image    = docker_image.{{ inventory_hostname }}_alloy.image_id
  name     = "alloy"
  provider = docker.{{ inventory_hostname }}
  command = [
    "run", "--storage.path=/var/lib/alloy/data",
    "/etc/alloy/config.alloy"
  ]
  restart = "unless-stopped"
  log_driver = "json-file"
  log_opts = {
    tag = {% raw %}"{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"{% endraw %}
  }
  dns = ["2a00:1098:2c::1", "2a00:1098:2c::1", "2a00:1098:2b::1"]
  network_mode = "bridge"
  networks_advanced {
    name = docker_network.{{ inventory_hostname }}_backend.name
  }
  ports {
    internal = 514
    external = 514
    protocol = "udp"
  }
  ports {
    internal = 601
    external = 601
    protocol = "tcp"
  }
  volumes {
    container_path = "/etc/alloy/config.alloy"
    host_path      = "/home/nxthdr/alloy/config/config.alloy"
  }
  volumes {
    container_path = "/var/lib/alloy/data"
    host_path      = "/home/nxthdr/alloy/data"
  }
  volumes {
    container_path = "/var/lib/docker/containers"
    host_path = "/var/lib/docker/containers"
    read_only = "true"
  }
}

# Node Exporter
resource "docker_image" "{{ inventory_hostname }}_node_exporter" {
  name     = "prom/node-exporter:v1.9.1"
  provider = docker.{{ inventory_hostname }}
}

resource "docker_container" "{{ inventory_hostname }}_node_exporter" {
  image    = docker_image.{{ inventory_hostname }}_node_exporter.image_id
  name     = "node_exporter"
  provider = docker.{{ inventory_hostname }}
  command = [
    "--path.procfs=/host/proc",
    "--path.rootfs=/rootfs",
    "--path.sysfs=/host/sys",
    "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
  ]
  restart = "unless-stopped"
  log_driver = "json-file"
  log_opts = {
    tag = {% raw %}"{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"{% endraw %}
  }
  user         = "1000:1000"
  pid_mode     = "host"
  hostname     = "{{ inventory_hostname }}" # Also fix this hostname if it should be dynamic
  network_mode = "bridge"
  networks_advanced {
    name = docker_network.{{ inventory_hostname }}_backend.name
  }
  volumes {
    container_path = "/host/proc"
    host_path      = "/proc"
    read_only      = true
  }
  volumes {
    container_path = "/host/sys"
    host_path      = "/sys"
    read_only      = true
  }
  volumes {
    container_path = "/rootfs"
    host_path      = "/"
    read_only      = true
  }
}

# Cadvisor
resource "docker_image" "{{ inventory_hostname }}_cadvisor" {
  name     = "gcr.io/cadvisor/cadvisor:v0.52.1"
  provider = docker.{{ inventory_hostname }}
}

resource "docker_container" "{{ inventory_hostname }}_cadvisor" {
  image    = docker_image.{{ inventory_hostname }}_cadvisor.image_id
  name     = "cadvisor"
  provider = docker.{{ inventory_hostname }}
  restart = "unless-stopped"
  log_driver = "json-file"
  log_opts = {
    tag = {% raw %}"{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"{% endraw %}
  }
  privileged   = true
  network_mode = "bridge"
  networks_advanced {
    name = docker_network.{{ inventory_hostname }}_backend.name
  }
  volumes {
    container_path = "/rootfs"
    host_path      = "/"
    read_only      = true
  }
  volumes {
    container_path = "/var/run"
    host_path      = "/var/run"
    read_only      = true
  }
  volumes {
    container_path = "/sys"
    host_path      = "/sys"
    read_only      = true
  }
  volumes {
    container_path = "/var/lib/docker"
    host_path      = "/var/lib/docker"
    read_only      = true
  }
  volumes {
    container_path = "/dev/disk"
    host_path      = "/dev/disk"
    read_only      = true
  }
}

# Saimiris
data "docker_registry_image" "{{ inventory_hostname }}_saimiris" {
  name     = "ghcr.io/nxthdr/saimiris:main"
  provider = docker.{{ inventory_hostname }}
}

resource "docker_image" "{{ inventory_hostname }}_saimiris" {
  name = data.docker_registry_image.{{ inventory_hostname }}_saimiris.name
  provider = docker.{{ inventory_hostname }}
  pull_triggers = [ data.docker_registry_image.{{ inventory_hostname }}_saimiris.sha256_digest ]
}

resource "docker_container" "{{ inventory_hostname }}_saimiris" {
  image    = docker_image.{{ inventory_hostname }}_saimiris.image_id
  name     = "saimiris"
  provider = docker.{{ inventory_hostname }}
  command = [ "-v", "agent", "--config=/config/saimiris.yml" ]
  restart = "unless-stopped"
  log_driver = "json-file"
  log_opts = {
    tag = {% raw %}"{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"{% endraw %}
  }
  dns = ["2a00:1098:2c::1", "2a00:1098:2c::1", "2a00:1098:2b::1"]
  network_mode = "host"
  volumes {
    container_path = "/config/saimiris.yml"
    host_path      = "/home/nxthdr/saimiris/config/saimiris.yml"
  }
}
